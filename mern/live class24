// Create a function that takes another function as an argument and calls it after 3 seconds (HOF + Callback).
// function callerfnc(fn){
//     setTimeout(fn, 3000);
// }

// callerfnc(function(){
//     console.log("hi")
// })







// Implement your own version of `.map()` as a higher-order function.
// let arr = [1,2,3,4,5]
// function wow(arr, fn){
//     let newarr = []
//     for(let i = 0; i < arr.length; i++){
//         newarr.push(fn(arr[i]))
//     }

//     return newarr;
// }

// let ans = wow(arr, function(value){
//     return value+2;
// })

// console.log(ans)







// Write a function that uses closures to create a counter.
// function counter(){
//     let count = 0;
//     return function(){
//         count++;
//         console.log(count)
//     }
// }

// let makecount = counter()
// makecount();
// makecount();
// makecount();








// Implement a function that limits how many times another function can be called (Closure + HOF).
function funlimiter(fn, limit){
    let totalcalled = 0;

    return function(){
        if(totalcalled < limit){
            totalcalled++;
            fn();
        }else{
            console.log("limit reached")
        }
    }
}

let limiter = funlimiter(function (){
    console.log("hey");
}, 3)

limiter();
limiter();
limiter();
limiter();
